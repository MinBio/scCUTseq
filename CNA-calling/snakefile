import glob, os

# Get config
configfile: "config.yaml"

# Set paths
base_path = config["run_info"]["base_path"]
run = config["run_info"]["run"]
library = config["run_info"]["library"]

full_path = base_path + run + "/" + library + "/"

# Get samples
samples = [os.path.basename(x) for x in glob.glob(full_path + "/bamfiles/" + "*bam")]
samples = [x.replace(".dedup_q30.bam", "") for x in samples]

# Specify target files
rule all:
	input:
		expand(full_path + "out/dnaobj-psoptim-{binsize}.Rda",
			binsize = config["dnacopy"]["binsizes"]),
		expand(full_path + "plots/profileplots/{binsize}/{sample}.png",
			sample = samples,binsize = config["dnacopy"]["binsizes"]),
		expand(full_path + "plots/genomewide/genomewideheatmap_{binsize}.png",
			binsize = config["dnacopy"]["binsizes"]),
		expand(full_path + "plots/genomewide/HQ-genomewideheatmap_{binsize}.png",
			binsize = config["dnacopy"]["binsizes"])


# Generate bed file and filter out blacklisted regions
rule makeBed:
	input:
		bam=full_path + "bamfiles/{sample}.dedup_q30.bam",
		blacklist=config["paths"]["blacklist"]
	output:
		bed=full_path + "bedfiles/{sample}.bed.gz"
	shell:
		"""
		bedtools bamtobed -i {input.bam} | grep -vE '^MT|^GL|^Y|^chrM|^chrU|^chrY' | \
		bedtools intersect -a stdin -b {input.blacklist} -v | \
		sort -k1,1V -k2,2n -k3,3n | gzip -c > {output}
		"""

# count reads per bin
rule countReads:
	input:
		bed=full_path + "bedfiles/{sample}.bed.gz",
		bins=config["paths"]["binbed_file"]
	output:
		full_path + "bincounts/{sample}_{binsize}.tsv"
	params:
		sample_id="{sample}"
	shell:
		"""
		echo {params.sample_id} > {output}
		bedtools intersect -nonamecheck -F 0.5 -c -a {input.bins} \
		-b {input.bed} | cut -f4 >> {output}
		"""

# Concatenate bincounts
rule concatenateReadcounts:
	input:
		expand(full_path + "bincounts/{sample}_{{binsize}}.tsv",
			sample = samples)
	output:
		readcounts=full_path + "out/bincounts-{binsize}.tsv"
	script:
		"Scripts/concatReadcounts.R"


rule segment_dna:
	"""
	Segment DNA read counts by variable bins using DNAcopy (circular binary segmentation)
	"""
	input:
		full_path + "out/bincounts-{binsize}.tsv"
	output:
		full_path + "out/dnaobj-{binsize}.Rds"
	params:
		blacklist=config["paths"]["blacklist"],
		binbed_file=config["paths"]["binbed_file"],
		bin_file=config["paths"]["bin_file"],
		gc_file=config["paths"]["gc_file"],
		bnd_file=config["paths"]["bnd_file"],
		min_count=config["dnacopy"]["min_count"],
		cbs_minwidth=config["dnacopy"]["cbs_minwidth"],
		cbs_alpha=config["dnacopy"]["cbs_alpha"],
		cbs_undosplits=config["dnacopy"]["cbs_undosplits"],
		cbs_sdprune=config["dnacopy"]["cbs_sdprune"],
		rm_outliers=config["dnacopy"]["cbs_remove_outlier_bins"],
		normal=config["paths"]["normal"]
	script:
		"Scripts/process_dna_parallel.R"

rule integer_dna:
	"""
	Find copy number integers by PSO
	"""
	input:
		full_path + "out/dnaobj-{binsize}.Rds"
	output:
		full_path + "out/dnaobj-psoptim-{binsize}.Rda"
	threads: config["run_info"]["threads"]
	script:
		"Scripts/process_pso.R"

rule generatePlots:
	input:
		full_path + "out/dnaobj-psoptim-{binsize}.Rda",
		full_path + "out/dnaobj-{binsize}.Rds"
	output:
		expand(full_path + "plots/profileplots/{{binsize}}/{sample}.png",
			sample = samples),
		full_path + "plots/genomewide/genomewideheatmap_{binsize}.png",
		full_path + "plots/genomewide/HQ-genomewideheatmap_{binsize}.png"
	params:
		outdir_profiles=full_path + "plots/profileplots/",
		outdir_genomewide=full_path + "plots/genomewide/",
		samples=samples
	threads: config["run_info"]["threads"]
	script:
		"Scripts/generatePlots.R"

