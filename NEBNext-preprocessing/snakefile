import glob, os
import pandas as pd

# Specify config file
configfile: "config.yaml"

# Specify samples
samples = glob.glob(config['indir'] + "*R1.fastq.gz")

# Get basename for each sample and split after R1 suffix
samples = [os.path.basename(sample).split("_R1", 1)[0] for sample in samples]

# Rule specifying output files
rule all:
    input:
        expand(config['outdir'] + "bamfiles/{sample}.dedup.bam",
            sample = samples),
        expand(config['outdir'] + "bamfiles/{sample}.dedup.bam.bai",
            sample = samples),
        config['outdir'] + "metrics.tsv"



# Rule for extracting barcodes from read and appending them to head
if config['paired']:       

    # Aligning
    rule bwa:
        input:
            ref=config['ref'],
            fastq1=config['indir'] + "{sample}_R1.fastq.gz",
            fastq2=config['indir'] + "{sample}_R2.fastq.gz",
        output:
            bam=temp(config['outdir'] + "bamfiles/{sample}.bam"),
            bai=temp(config['outdir'] + "bamfiles/{sample}.bam.bai")
        params:
            rg=r"@RG\tID:{sample}\tSM:{sample}\tPL:ILLUMINA"
        threads: config['threads']
        shell:
            "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
            "samtools sort -o {output.bam} && "
            "samtools index -@ {threads} {output.bam}"

else:
    # Aligning
    rule bwa:
        input:
            ref=config['ref'],
            fastq=config['indir'] + "{sample}_R1.fastq.gz",
        output:
            bam=temp(config['outdir'] + "bamfiles/{sample}.bam"),
            bai=temp(config['outdir'] + "bamfiles/{sample}.bam.bai")
        params:
            rg=r"@RG\tID:{sample}\tSM:{sample}\tPL:ILLUMINA"
        threads: config['threads']
        shell:
            "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
            "samtools sort -o {output.bam} && "
            "samtools index -@ {threads} {output.bam}"

# Dedup
rule deduplication:
    input:
        config['outdir'] + "bamfiles/{sample}.bam"
    output:
        bam=config['outdir'] + "bamfiles/{sample}.dedup.bam",
        bai=config['outdir'] + "bamfiles/{sample}.dedup.bam.bai",
        metrics=config['outdir'] + "bamfiles/{sample}.dedup.metrics"
    threads: 16
    shell:
        "gatk MarkDuplicates -I {input} -O {output.bam} -M {output.metrics}&& samtools index {output.bam}"

# QC post-dedup
rule aflred:
    input:
        bam=config['outdir'] + "bamfiles/{sample}.dedup.bam",
        ref=config['ref']
    output:
        temp(config['outdir'] + "bamfiles/{sample}.dedup.tsv.gz")
    shell:
        config['alfred'] + " qc -r {input.ref} -o {output} "
        "{input.bam}"

# QC summary
rule qc:
    input:
        expand(config['outdir'] + "bamfiles/{sample}.dedup.tsv.gz",
            sample = samples)
    output:
        protected(config['outdir'] + "metrics.tsv")
    params:
        directory=config['outdir'],
        out=config['outdir'] + "metrics.tsv"
    shell:
        """
        zgrep ^ME {params.directory}bamfiles/*dedup.tsv.gz | cut -f 2- | \\
        sed -n '1p;0~2p' > {params.out}
        """