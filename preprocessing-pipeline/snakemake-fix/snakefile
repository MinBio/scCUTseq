import glob, os
import pandas as pd

# Specify config file
configfile: "config.yaml"

# Specify samples
bc = pd.read_csv(config['bc'], sep = ",", header = None)
sample = config['samplename']

# Rule specifying output files
rule all:
    input:
        expand(config['output'] + "bamfiles/{bc}.dedup_q30.bam",
            bc = bc.iloc[:,0]),
        expand(config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            bc = bc.iloc[:,0]),
        config['output'] + config['samplename'] + "_log.txt",
        config['output'] + config['samplename'] + "_all.tsv",
        config['output'] + config['samplename'] + "_dedup.tsv"


# Aligning
rule bwa:
    input:
        ref=config['ref'],
        fastq1=config['output'] + "demultiplexed/{bc}_R1.fastq.gz",
        fastq2=config['output'] + "demultiplexed/{bc}_R2.fastq.gz"
    output:
        bam=temp(config['output'] + "bamfiles/{bc}.bam"),
        bai=temp(config['output'] + "bamfiles/{bc}.bam.bai")
    params:
        rg=r"@RG\tID:{bc}\tSM:{bc}\tPL:ILLUMINA"
    threads: config['threads']
    shell:
        "bwa mem -M -t {threads} -R '{params.rg}' {input} | "
        "samtools sort -o {output.bam} && "
        "samtools index -@ {threads} {output.bam}"


# Get readnames of reads that mapped within cutsite range
# and map to chr 1:22, X or Y
rule getReads:
    input:
        bam=config['output'] + "bamfiles/{bc}.bam",
        cutsites=config['cutsites']
    output:
        temp(config['output'] + "bamfiles/{bc}_readnames.txt")
    params:
        readlength = config["read_length"]
    shell:
        config['getReads'] + " -b {input.bam} -c {input.cutsites} -o {output} "
        "--readlength {params} --paired"

rule filterReads:
    input:
        bam=config['output'] + "bamfiles/{bc}.bam",
        bai=config['output'] + "bamfiles/{bc}.bam.bai",
        readnames=config['output'] + "bamfiles/{bc}_readnames.txt"
    output:
        bam=temp(config['output'] + "bamfiles/{bc}_filtered.bam"),
        bai=temp(config['output'] + "bamfiles/{bc}_filtered.bai"),
        log=config['output'] + "logs/{bc}-cutsite-filter.log"
    shell:
        """
        gatk FilterSamReads -I {input.bam} -O {output.bam} \\
        -RLF {input.readnames} --FILTER includeReadList --CREATE_INDEX true &&

        echo "pre cutsite-distance filter reads: " \\
        $(samtools view -c -f67 {input.bam}) > {output.log}

        echo "post cutsite-distance filter reads: " \\
        $(samtools view -c -f67 {output.bam}) >> {output.log}
        """

# QC pre-dedup
rule aflred_pre:
    input:
        bam=config['output'] + "bamfiles/{bc}_filtered.bam",
        ref=config['ref']
    output:
        temp(config['output'] + "bamfiles/{bc}.all.tsv.gz")
    shell:
        config['alfred'] + " qc -r {input.ref} -o {output} "
        "{input.bam}"

# Dedup
if config['paired']:
    rule deduplication:
        input:
            bam=config['output'] + "bamfiles/{bc}_filtered.bam",
            index=config['output'] + "bamfiles/{bc}_filtered.bai"
        output:
            bam=protected(config['output'] + "bamfiles/{bc}.dedup_q30.bam"),
            bai=config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            log=config['output'] + "logs/{bc}.log"
        threads: 4
        shell:
            "umi_tools dedup -I {input.bam} -S {output.bam} -L {output.log} "
            "--mapping-quality 30 --paired && samtools index -@ {threads} {output.bam}"
else:
    rule deduplication:
        input:
            bam=config['output'] + "bamfiles/{bc}_filtered.bam",
            index=config['output'] + "bamfiles/{bc}_filtered.bai"
        output:
            bam=protected(config['output'] + "bamfiles/{bc}.dedup_q30.bam"),
            bai=config['output'] + "bamfiles/{bc}.dedup_q30.bam.bai",
            log=config['output'] + "logs/{bc}.log"
        threads: 4
        shell:
            "umi_tools dedup -I {input.bam} -S {output.bam} -L {output.log} "
            "--mapping-quality 30 && samtools index -@ {threads} {output.bam}"


# QC post-dedup
rule aflred_post:
    input:
        bam=config['output'] + "bamfiles/{bc}.dedup_q30.bam",
        ref=config['ref']
    output:
        temp(config['output'] + "bamfiles/{bc}.dedup.tsv.gz")
    shell:
        config['alfred'] + " qc -r {input.ref} -o {output} "
        "{input.bam}"

# QC summary
rule qc:
    input:
        expand(config['output'] + "bamfiles/{bc}.all.tsv.gz",
            bc = bc.iloc[:,0]),
        expand(config['output'] + "bamfiles/{bc}.dedup.tsv.gz",
            bc = bc.iloc[:,0])
    output:
        protected(config['output'] + config['samplename'] + "_all.tsv"),
        protected(config['output'] + config['samplename'] + "_dedup.tsv")
    params:
        directory=config['output'],
        out=config['output'] + config['samplename'] + "_"
    shell:
        """
        zgrep ^ME {params.directory}bamfiles/*all.tsv.gz | cut -f 2- | \\
        sed -n '1p;0~2p' > {params.out}all.tsv
        zgrep ^ME {params.directory}bamfiles/*dedup.tsv.gz | cut -f 2- | \\
        sed -n '1p;0~2p' > {params.out}dedup.tsv
        """